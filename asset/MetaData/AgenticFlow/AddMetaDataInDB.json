{
  "name": "MetaData_Buy2Cash",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "1AjW6UIG6ZHzbeYAASM1kgVsLV6Y4qcPVGCDtXH2R3w4",
          "mode": "list",
          "cachedResultName": "Untitled spreadsheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1AjW6UIG6ZHzbeYAASM1kgVsLV6Y4qcPVGCDtXH2R3w4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1AjW6UIG6ZHzbeYAASM1kgVsLV6Y4qcPVGCDtXH2R3w4/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        -4800,
        3392
      ],
      "id": "30184428-db6f-491c-b18e-15cf92920408",
      "name": "Google Sheets Trigger",
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "LdmiUwWEGOIyHpjt",
          "name": "Google Sheets Trigger account"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 50,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -4592,
        3392
      ],
      "id": "4b1e6a39-e379-444d-bd29-48b2471fc0ea",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1AjW6UIG6ZHzbeYAASM1kgVsLV6Y4qcPVGCDtXH2R3w4",
          "mode": "list",
          "cachedResultName": "Untitled spreadsheet",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1AjW6UIG6ZHzbeYAASM1kgVsLV6Y4qcPVGCDtXH2R3w4/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1AjW6UIG6ZHzbeYAASM1kgVsLV6Y4qcPVGCDtXH2R3w4/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "MainIngredient": "={{ $json.output[\"Main Ingredient\"] }}",
            "TypicalUse": "={{ $json.output[\"Typical Use\"] }}",
            "Sno": "={{ $json.output.Sno }}",
            "ProductName": "={{ $json.output.ProductName }}",
            "category": "={{ $json.output.category }}"
          },
          "matchingColumns": [
            "Sno"
          ],
          "schema": [
            {
              "id": "Sno",
              "displayName": "Sno",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ProductName",
              "displayName": "ProductName",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "imagelink",
              "displayName": "imagelink",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "mrpPrice",
              "displayName": "mrpPrice",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "offerPrice",
              "displayName": "offerPrice",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "category",
              "displayName": "category",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "subCategory",
              "displayName": "subCategory",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "unit",
              "displayName": "unit",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "isGstInclusive",
              "displayName": "isGstInclusive",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "gst",
              "displayName": "gst",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "barcode",
              "displayName": "barcode",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "hsncode",
              "displayName": "hsncode",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "startingUnit",
              "displayName": "startingUnit",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "endingUnit",
              "displayName": "endingUnit",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "MainIngredient",
              "displayName": "MainIngredient",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "TypicalUse",
              "displayName": "TypicalUse",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        5424,
        3408
      ],
      "id": "0f012a5b-4abd-46f5-94cb-91671f5fdab2",
      "name": "Update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LcBMMzHE5hbTC1nJ",
          "name": "Google Sheets API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        880,
        336
      ],
      "id": "c23ef3b2-7b5e-424c-a7c9-9131d120d24c",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1072,
        352
      ],
      "id": "265079f3-1b86-4b76-98d7-4f7fe49f68d2",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        144
      ],
      "id": "31023a7b-b50e-4dad-aa64-278253349c75",
      "name": "Code"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        688,
        144
      ],
      "id": "c3ed73d1-c181-4d13-97e5-95a7d0ba4c36",
      "name": "Wait",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        912,
        688
      ],
      "id": "a6e9f168-efe4-441f-9014-e14d0816e42f",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1104,
        704
      ],
      "id": "6aba492e-ba27-4822-8b85-756d6c2f52bd",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        512,
        496
      ],
      "id": "ed0c3321-eb01-4a1d-b549-758abb7862ff",
      "name": "Code1"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        720,
        496
      ],
      "id": "34c712f7-e617-49d9-956a-aac81ed74aed",
      "name": "Wait1",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        944,
        1088
      ],
      "id": "493b04db-3563-434e-8504-cbe0c6370180",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1136,
        1104
      ],
      "id": "60dfc0fc-ed6a-4e68-975b-ca2e6f87ad51",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        544,
        896
      ],
      "id": "602c4ddf-9f40-41ad-bd80-e46355768d8c",
      "name": "Code2"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        752,
        896
      ],
      "id": "ed513c22-a05a-4102-93c4-b04409ee9777",
      "name": "Wait2",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        976,
        1488
      ],
      "id": "3ef5a634-f334-4bb8-9797-885d87aaaa0e",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1168,
        1504
      ],
      "id": "94390a39-fa27-49ea-98a1-391a1a942817",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        1296
      ],
      "id": "e73d3914-75cc-4da7-b6f9-17a6e5412730",
      "name": "Code3"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        784,
        1296
      ],
      "id": "4e76f630-3516-4184-8370-af404aae5c6a",
      "name": "Wait3",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1008,
        1904
      ],
      "id": "e0c1510d-9706-4e9a-a8d6-1751063ed4af",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1200,
        1920
      ],
      "id": "d322247d-f942-4b1f-9f35-2b1259f33e93",
      "name": "Structured Output Parser4"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        1712
      ],
      "id": "3a7f6136-61d3-4baa-8cc9-790de40c427e",
      "name": "Code4"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        816,
        1712
      ],
      "id": "29d9e711-835a-4c1f-9782-416fa7603ba6",
      "name": "Wait4",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1056,
        2320
      ],
      "id": "1f946878-ed3a-4165-8c50-81ce136d5da3",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1248,
        2336
      ],
      "id": "75021b3b-8117-4f8b-90de-bdb08379ae21",
      "name": "Structured Output Parser5"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        656,
        2128
      ],
      "id": "183aa54b-7743-4b95-abf1-6befe33efb61",
      "name": "Code5"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        864,
        2128
      ],
      "id": "82455d04-df1c-4e51-99c5-67692dc6f79b",
      "name": "Wait5",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1072,
        2688
      ],
      "id": "5b9873f6-9403-44b8-9786-708d46b8eaf7",
      "name": "OpenAI Chat Model6",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1264,
        2704
      ],
      "id": "a7059648-219c-441c-a9eb-1fed3c247f4d",
      "name": "Structured Output Parser6"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        2496
      ],
      "id": "d83d5f16-1b7a-4abf-a196-0addb8019e10",
      "name": "Code6"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        880,
        2496
      ],
      "id": "86ac1fb5-3398-4140-b873-4b7cca698159",
      "name": "Wait6",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1104,
        3056
      ],
      "id": "bb58a912-2025-48ce-9da2-bd08b5a25e71",
      "name": "OpenAI Chat Model7",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1296,
        3072
      ],
      "id": "8ee238f1-d3e5-481e-a066-7aeccd0e6613",
      "name": "Structured Output Parser7"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        704,
        2864
      ],
      "id": "bbea0fd9-3608-4485-a0a2-2a886d31bcab",
      "name": "Code7"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        912,
        2864
      ],
      "id": "84f2db90-fc9e-46e1-9b3d-8ea77ad33776",
      "name": "Wait7",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1136,
        3424
      ],
      "id": "5fc68012-2016-43c1-873a-4330b18ad0fd",
      "name": "OpenAI Chat Model8",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1328,
        3440
      ],
      "id": "bf13e852-1dae-4219-9786-340f415e60fc",
      "name": "Structured Output Parser8"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        736,
        3232
      ],
      "id": "c0c89eee-9c66-4434-be12-388b8f83f756",
      "name": "Code8"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        944,
        3232
      ],
      "id": "255e3854-8bc9-4448-9eab-3b11fe2171b3",
      "name": "Wait8",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1200,
        3840
      ],
      "id": "95be0a8b-59b3-439d-a477-ee807caaf811",
      "name": "OpenAI Chat Model9",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1392,
        3856
      ],
      "id": "ba1b6850-6a82-408b-8d29-48a2c9323f20",
      "name": "Structured Output Parser9"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        3648
      ],
      "id": "0988fdde-326a-4465-b1f3-d3ad16d88e6c",
      "name": "Code9"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1008,
        3648
      ],
      "id": "ce17677d-c9be-4951-a993-2900ef47dc82",
      "name": "Wait9",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1280,
        4784
      ],
      "id": "8c583e9f-c20d-4d4a-aed8-2754bbb6b9a1",
      "name": "OpenAI Chat Model10",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1472,
        4800
      ],
      "id": "335c45c8-583c-4841-824d-fdc8eacd3624",
      "name": "Structured Output Parser10"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        4592
      ],
      "id": "55ffcd08-28ef-4196-8ae3-c593266c0fdd",
      "name": "Code10"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1088,
        4592
      ],
      "id": "4a1507d3-c519-4196-8105-3707facba64a",
      "name": "Wait10",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1296,
        5200
      ],
      "id": "7703cbf2-203d-4609-9758-330d57087a8a",
      "name": "OpenAI Chat Model11",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1488,
        5216
      ],
      "id": "fec8a8df-c914-4dec-b33c-3a3174c78884",
      "name": "Structured Output Parser11"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        5008
      ],
      "id": "ee2e1c16-babf-42ac-98a9-7208cb589a13",
      "name": "Code11"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1104,
        5008
      ],
      "id": "2f68ca31-feb0-4977-81b7-0d8e335ecbb8",
      "name": "Wait11",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1312,
        5568
      ],
      "id": "23fce367-9a7e-4f88-8eb7-d7eee6e25320",
      "name": "OpenAI Chat Model12",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1504,
        5584
      ],
      "id": "ab586e33-72ba-4022-b026-4113343dd9e3",
      "name": "Structured Output Parser12"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        912,
        5376
      ],
      "id": "12989427-a479-4af8-a12c-a4ab9e1d96b4",
      "name": "Code12"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1120,
        5376
      ],
      "id": "d7a4b4e4-fcde-418a-9bad-e8a22b7d9de2",
      "name": "Wait12",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1328,
        5952
      ],
      "id": "04e7b5a4-e4ba-4ad8-bcdf-b7d911245d58",
      "name": "OpenAI Chat Model13",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1520,
        5968
      ],
      "id": "4e7e97fc-b7a2-4369-9af1-aa3934c20749",
      "name": "Structured Output Parser13"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        928,
        5760
      ],
      "id": "8a1742ae-8925-4a51-a9eb-bd6377c59af4",
      "name": "Code13"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1136,
        5760
      ],
      "id": "72ccfc07-db68-4c64-8299-a6304baa7db0",
      "name": "Wait13",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1360,
        6320
      ],
      "id": "cffd6888-e94d-456b-81f0-e3cd2ab8be3b",
      "name": "OpenAI Chat Model14",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1552,
        6336
      ],
      "id": "67eb6ee8-8182-4dc8-b0a3-1f2e438f65cb",
      "name": "Structured Output Parser14"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        6128
      ],
      "id": "a567f4e8-0d8f-433b-8ecd-9fd983bfa939",
      "name": "Code14"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1168,
        6128
      ],
      "id": "762bc199-fdd6-47db-b7bd-43bd4b677fe5",
      "name": "Wait14",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1392,
        6720
      ],
      "id": "a2139004-5775-42ca-8ccf-0c047c33468b",
      "name": "OpenAI Chat Model15",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1584,
        6736
      ],
      "id": "7bad6d8d-3135-49c7-8299-e85005771574",
      "name": "Structured Output Parser15"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        6528
      ],
      "id": "e41da965-fe90-4f97-9ce6-34c861a246c5",
      "name": "Code15"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1200,
        6528
      ],
      "id": "06a6b16b-eac3-4e59-82da-1fcb3866b080",
      "name": "Wait15",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1424,
        7104
      ],
      "id": "c6313b28-c4c6-4fde-b6bd-fbc53b585b69",
      "name": "OpenAI Chat Model16",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1616,
        7120
      ],
      "id": "70d1f102-3b83-48ca-81be-84506a45578b",
      "name": "Structured Output Parser16"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        6912
      ],
      "id": "36e6adf7-694b-4bc9-86f8-5cfc08b9a95e",
      "name": "Code16"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1232,
        6912
      ],
      "id": "2e720171-eae8-44f9-bff4-75a2e43d3ba9",
      "name": "Wait16",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1408,
        7472
      ],
      "id": "744667cd-45ee-4d55-8e1a-07c52a916c3a",
      "name": "OpenAI Chat Model17",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1600,
        7488
      ],
      "id": "11a0fd57-52ac-4caa-ae5f-db3e99fda1fa",
      "name": "Structured Output Parser17"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1008,
        7280
      ],
      "id": "689efa35-20ef-4583-8ba3-ad82e69f6e07",
      "name": "Code17"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1216,
        7280
      ],
      "id": "fb918dad-5eb6-4c2c-9f01-6f0e3b154f21",
      "name": "Wait17",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Fresh Fruits",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "1a383cd9-b9eb-4e42-b626-b587b55ca830"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d3940867-c154-4564-87d2-7c2b5361a4f9",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Fresh Vegetables",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b6d8707e-a6c3-4fe8-88c2-a7336772372d",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Dairy & Milk Products",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "41bc65b2-3d90-4bf8-b072-07a3c148d5c0",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Breakfast & Cereals",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1202c68d-bee5-45b9-bf0f-d4cefc3000b4",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Atta, Rice & Dhals",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "84291e6e-439f-4f60-a8ae-8a0c09765697",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Tea, Coffee & Beverages",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ee64aef7-7916-4005-b474-88144a79e739",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Masalas & Spices",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "344a4346-a2e4-486b-ae5d-2a18202deee4",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Instant & Ready Mixes",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "bb0e8613-e3f5-497f-8da0-04acd6d55eb6",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Ice Creams & Frozen Foods",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "23fb2a48-29d7-4ef0-9edc-054d6f52dd49",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Household Cleaning",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ba136caf-7507-49ea-a8f6-a380b7dc56b7",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Breads & Bakery",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4ac2c2d1-2592-4991-b478-a3dc6e306990",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Beauty & Personal Care",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9f9936be-eb12-4d96-8319-ff901b5bd520",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Stationery & Games",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "df43e32d-c35c-44f5-adb6-d7f370e930a3",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Baby Care",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ab546391-8262-4bfa-90f4-1d9c11513d7d",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Laundry & Detergents",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "92d5d083-7aa5-46bd-963e-c1d2116fc9da",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Snacks & Chocolates",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e297bfa3-ea51-475f-ba31-9634702bd0b2",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Sauces, Spreads & Dips",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f9162d04-e921-46a8-ad5c-0f89e5b9057c",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Oils & Ghee",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9d21762d-22c8-4235-b2e0-0d6df0671779",
                    "leftValue": "={{ $json.category }}",
                    "rightValue": "Salt, Sugar & Jaggery",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -3616,
        3120
      ],
      "id": "debc3bf9-34e0-446b-82d0-4a25f7ee1c80",
      "name": "Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary vegetable or product type (e.g., \"Tomato\", \"Potato\", \"Spinach\"). Specify if the product is a processed vegetable item such as frozen, canned, or pickled vegetables.\n\nTypical Use: A brief sentence describing the most common culinary or daily use (e.g., used in salads, cooked as a vegetable side dish, or included in soups).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Vegetable Name>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Fresh Organic Tomato 500g\",\n\"category\": \"Fresh Vegetables\",\n\"Main Ingredient\": \"Tomato\",\n\"Typical Use\": \"Commonly used fresh in salads, cooking sauces, and garnishes.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.\n\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in food products, with expertise across diverse food types and typical uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary vegetable or product type, specifying if it is a processed vegetable item such as frozen, canned, or pickled.\n\nTypical Use: Provide a concise sentence describing the most common culinary or everyday application.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        928,
        496
      ],
      "id": "aa90305b-416e-430a-82e4-48f18a2423df",
      "name": "Fresh Vegetables",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary fruit or product type (e.g., \"Apple\", \"Banana\", \"Mango\"). Specify if the product is a processed fruit item such as dried fruit or fruit preserve.\n\nTypical Use: A brief sentence describing the most common culinary or daily use (e.g., eaten fresh, used in smoothies, desserts, or salads).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Fruit Name>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Fresh Alphonso Mango 1kg\",\n\"category\": \"Fresh Fruits\",\n\"Main Ingredient\": \"Alphonso Mango\",\n\"Typical Use\": \"Widely enjoyed fresh, used in smoothies, desserts, and fruit salads.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in food products, with expertise across diverse food types and typical uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary fruit or product type, specifying if it is a processed fruit item such as dried fruit or fruit preserve.\n\nTypical Use: Provide a concise sentence describing the most common culinary or everyday application.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        896,
        144
      ],
      "id": "f871d6cc-72c3-4b9e-ab38-947f4e856062",
      "name": "Fresh Fruits",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary dairy or milk product type (e.g., \"Cow Milk\", \"Paneer\", \"Butter\", \"Yogurt\"). Specify if it is a specialty dairy product or derivative.\n\nTypical Use: A brief sentence describing the most common culinary or daily use (e.g., used for drinking, cooking, spread, or in desserts).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Dairy/Milk Product Name>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Amul Fresh Cow Milk 1L\",\n\"category\": \"Dairy & Milk Products\",\n\"Main Ingredient\": \"Milk\",\n\"Typical Use\": \"Commonly consumed as a beverage and used in cooking,baking, Tea and coffee.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in food products, with expertise across diverse food types and typical uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary dairy or milk product type, specifying if it is a specialty dairy product or derivative.\n\nTypical Use: Provide a concise sentence describing the most common culinary or everyday application.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        960,
        896
      ],
      "id": "ff61ef19-1690-4c05-9fe9-06b9075cf960",
      "name": "Dairy & Milk Products",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary cereal grain or product type (e.g., \"Oats\", \"Corn Flakes\", \"Muesli\"). Specify if the product is a flavored, sweetened, or processed breakfast cereal, or a hot cereal such as oatmeal.\n\nTypical Use: A brief sentence describing the most common dietary use (e.g., eaten with milk for breakfast, added to yogurt, or enjoyed as a snack).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Cereal Name/Type>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Classic Rolled Oats 500g\",\n\"category\": \"Breakfast & Cereals\",\n\"Main Ingredient\": \"Rolled Oats\",\n\"Typical Use\": \"Commonly cooked into oatmeal or porridge, or eaten with milk and fruits for breakfast.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.\n\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in food products, with expertise across diverse breakfast cereals and their typical uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary cereal grain or product type, specifying if it is flavored, sweetened, or a hot/ready-to-eat cereal.\n\nTypical Use: Provide a concise sentence describing the most common way the product is consumed.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        992,
        1296
      ],
      "id": "cebc90fa-131d-4f20-ad3f-082a179b2860",
      "name": "Breakfast & Cereals",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary grain, flour, or pulse (e.g., \"Wheat Atta\", \"Basmati Rice\", \"Toor Dal\", \"Moong Dal\", \"Multigrain Atta\"). Specify if the product is a specialty flour, instant mix, or processed pulse.\n\nTypical Use: A brief sentence describing the most common culinary or daily use (e.g., used to make rotis and parathas, prepared as dal, cooked as a staple with curries, or for special rice dishes like pulao).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Grain/Flour/Pulse Name>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Aashirvaad Whole Wheat Atta 5kg\",\n\"category\": \"Atta, Rice & Dhals\",\n\"Main Ingredient\": \"Whole Wheat Atta\",\n\"Typical Use\": \"Primarily used to make soft and nutritious chapatis and rotis.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in food products, with expertise across Indian flours, rice varieties, dals, and their typical uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary type of atta, rice, or dal, specifying if it is a multigrain, specialty flour, or processed pulse.\n\nTypical Use: Provide a concise sentence describing the most common culinary or everyday application.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1024,
        1712
      ],
      "id": "50402810-a292-4139-a6cd-6c923cc8a17b",
      "name": "Atta, Rice & Dhals",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The main beverage type or ingredient (e.g., \"Black Tea\", \"Green Tea\", \"Instant Coffee\", \"Lemonade\", \"Juice\"). Specify if it is a specialty beverage or blend.\n\nTypical Use: A brief sentence describing the most common way the beverage is consumed (e.g., served hot/cold, usually prepared with milk/sugar, enjoyed as a refreshing drink).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Beverage Name/Type>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Tata Premium Black Tea 500g\",\n\"category\": \"Tea, Coffee & Beverages\",\n\"Main Ingredient\": \"Black Tea\",\n\"Typical Use\": \"Usually brewed and served hot with milk and sugar.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in food products, with expertise across a wide range of beverages and their typical uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary beverage type or main ingredient, specifying if it is a blend or specialty drink.\n\nTypical Use: Provide a concise sentence describing the most common way the beverage is consumed.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1072,
        2128
      ],
      "id": "b7dea4ff-d22b-45cb-a227-70c56a2112f6",
      "name": "Tea, Coffee & Beverages",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary spice or spice blend (e.g., \"Garam Masala\", \"Turmeric\", \"Cumin Seeds\", \"Chaat Masala\"). Specify if it is a specialty or regional masala blend.\n\nTypical Use: A brief sentence describing the most common culinary use (e.g., used to flavor curries, rice dishes, snacks, or beverages).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Spice or Masala Name>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"MDH Garam Masala 100g\",\n\"category\": \"Masalas & Spices\",\n\"Main Ingredient\": \"Garam Masala\",\n\"Typical Use\": \"Used to add warmth and aroma to a variety of Indian curries and lentil dishes.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in food products, with expertise in diverse spice types, blends, and their culinary uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary spice or masala blend, specifying specialty or regional blends where applicable.\n\nTypical Use: Provide a concise sentence describing the most common culinary or everyday application.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1088,
        2496
      ],
      "id": "1fd3d634-dc1f-4eb9-a3ec-500fed7d3bc3",
      "name": "Masalas & Spices",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary mix type or product (e.g., \"Dosa Mix\", \"Idli Mix\", \"Upma Mix\", \"Besan Ladoo Mix\"). Specify if it is a specialty or regional instant mix.\n\nTypical Use: A brief sentence describing the most common preparation or consumption method (e.g., used to quickly prepare traditional South Indian breakfasts, snacks, or desserts).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Mix Name/Type>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Instant Rava Dosa Mix 500g\",\n\"category\": \"Instant & Ready Mixes\",\n\"Main Ingredient\": \"Rava Dosa Mix\",\n\"Typical Use\": \"Used to prepare crispy and quick South Indian dosas at home.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in food products, with expertise in diverse instant and ready mix foods and their preparation uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary instant mix or ready mix product, specifying if it is a specialty or regional variety.\n\nTypical Use: Provide a concise sentence describing the most common way the mix is prepared or consumed.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1120,
        2864
      ],
      "id": "503124a1-ca46-4a66-96e5-6a87e72868fd",
      "name": "Instant & Ready Mixes",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary ice cream, frozen dessert, or frozen food type (e.g., \"Vanilla Ice Cream\", \"Frozen Peas\", \"Paneer Tikka\", \"Mixed Veg Pizza\"). Specify if it’s a specialty frozen treat, novelty, or ready-to-cook frozen food.\n\nTypical Use: A brief sentence describing the most common way it is consumed or prepared (e.g., eaten as dessert, served as a snack, or quickly cooked).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Frozen Product Name/Type>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Vadilal Vanilla Ice Cream\",\n\"category\": \"Ice Creams & Frozen Foods\",\n\"Main Ingredient\": \"Vanilla Ice Cream\",\n\"Typical Use\": \"Commonly enjoyed as a dessert on its own or with cakes and pastries.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in food products, with expertise in a wide range of ice creams, frozen foods, and their typical uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary ice cream, frozen dessert, or frozen food type, specifying if it is a specialty item or ready-to-cook frozen food.\n\nTypical Use: Provide a concise sentence describing the most common way the frozen item is consumed or prepared.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1152,
        3232
      ],
      "id": "1199752c-c298-4dcd-b839-1f94e5d38715",
      "name": "Ice Creams & Frozen Foods",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary cleaning agent or product type (e.g., \"All-purpose Cleaner\", \"Dishwashing Liquid\", \"Glass Cleaner\", \"Disinfectant\"). Specify if it is a specialty cleaner such as floor cleaner, oven cleaner, or stain remover.\n\nTypical Use: A brief sentence describing the most common household cleaning or maintenance use (e.g., used for cleaning kitchen surfaces, glass, floors, or disinfecting bathrooms).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Cleaning Agent/Product Type>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"Clorox Toilet Bowl Cleaner 750ml\",\n  \"category\": \"Household Cleaning\",\n  \"Main Ingredient\": \"Toilet Bowl Cleaner\",\n  \"Typical Use\": \"Used to disinfect and remove stains from toilet bowls effectively.\"\n}\n\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, knowledgeable responses relevant to household cleaning products.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in household cleaning products, with expertise in diverse cleaning agents, their formulations, and typical household uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary cleaning agent or product type, specifying specialty or targeted cleaning uses where applicable.\n\nTypical Use: Provide a concise sentence describing the most common cleaning or maintenance application.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and expert informed on household cleaning."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1216,
        3648
      ],
      "id": "406b3641-b955-4aed-8387-b6dc87d05c55",
      "name": "Household Cleaning",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary product type or formulation (e.g., \"Moisturizer\", \"Shampoo\", \"Lipstick\", \"Deodorant\", \"Face Cream\"). Specify if it is a specialty product such as sunblock, hair serum, or cleansing balm.\n\nTypical Use: A brief sentence describing the most common usage or benefit (e.g., used to hydrate skin, cleanse hair, enhance lip color, or control body odor).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Beauty/Personal Care Product Type>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Nivea Nourishing Body Lotion 400ml\",\n\"category\": \"Beauty & Personal Care\",\n\"Main Ingredient\": \"Body Lotion\",\n\"Typical Use\": \"Used to moisturize and nourish dry skin for smoothness and hydration.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in beauty and personal care products, with expertise in a broad range of skincare, haircare, cosmetics, and hygiene-related items and their typical uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Identify the primary beauty or personal care product type or formulation, specifying if it is a specialty or targeted product.\n\nTypical Use: Provide a concise sentence describing the most common usage or benefit to the consumer.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and expert-informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1296,
        4592
      ],
      "id": "61fa9f0a-ac6d-4e6a-a40b-6ba392a4603e",
      "name": "Beauty & Personal Care",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary stationery item, game type, or product (e.g., \"Ballpoint Pen\", \"Notebook\", \"Board Game\", \"Crayons\", \"Desk Organizer\"). Specify if it is a specialty, creative, or novelty item.\n\nTypical Use: A brief sentence describing the most common use or purpose (e.g., used for writing and note-taking, for playing group games, for art projects, or organizing workspace).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Stationery/Game Name or Type>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Faber-Castell HB Pencils 12 Pack\",\n\"category\": \"Stationery & Games\",\n\"Main Ingredient\": \"Graphite Pencil\",\n\"Typical Use\": \"Used for writing, sketching, and drawing in school or office settings.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, knowledgeable responses relevant to stationery and games.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in stationery and games, with expertise in a broad range of writing tools, office supplies, creative products, and recreational games and their typical uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary stationery item or game type, specifying if it is a specialty, creative, or novelty item.\n\nTypical Use: Provide a concise sentence describing the most common use or purpose of the product.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and expert-informed for stationery and games."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1312,
        5008
      ],
      "id": "472a8add-5b30-4bbe-89ee-4797b44a8949",
      "name": "Stationery & Games",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary baby care product type (e.g., \"Baby Lotion\", \"Diaper\", \"Baby Shampoo\", \"Baby Wipes\"). Specify if it is a specialty or hypoallergenic product.\n\nTypical Use: A brief sentence describing the most common usage or benefit (e.g., used to moisturize baby’s skin, keep dry and comfortable, gently cleanse hair and skin).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Baby Care Product Type>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Pampers Baby Diapers Size 3\",\n\"category\": \"Baby Care\",\n\"Main Ingredient\": \"Baby Diapers\",\n\"Typical Use\": \"Used to keep babies dry and comfortable with absorbent protection.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, knowledgeable responses relevant to baby care products.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in baby care products, with expertise in diverse items such as diapers, lotions, shampoos, wipes, and their typical uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary baby care product type, specifying if it is a specialty or hypoallergenic product.\n\nTypical Use: Provide a concise sentence describing the most common usage or benefit.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and expert-informed for baby care products."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1328,
        5376
      ],
      "id": "1d4c3745-ec57-4afc-bdec-a24ac9766fdf",
      "name": "Baby Care",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary detergent type or product form (e.g., \"Powder Detergent\", \"Liquid Detergent\", \"Laundry Pod\", \"Fabric Softener\"). Specify if it is a specialty detergent such as hypoallergenic, bio (enzyme) detergent, or eco-friendly formulation.\n\nTypical Use: A brief sentence describing the most common laundry or fabric care use (e.g., used for cleaning clothes in washing machines or handwash, removing stains, softening fabrics).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Detergent Type/Form>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Surf Excel Matic Front Load Liquid Detergent 1L\",\n\"category\": \"Laundry & Detergents\",\n\"Main Ingredient\": \"Liquid Detergent\",\n\"Typical Use\": \"Designed for front-load washing machines to effectively remove stains and dirt from clothes.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, knowledgeable responses relevant to laundry and detergent products.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in laundry and detergent products, with expertise in various detergent forms, formulations, and their typical laundry uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary detergent type or form, specifying specialty types such as bio, hypoallergenic, or eco-friendly if applicable.\n\nTypical Use: Provide a concise sentence describing the most common laundry or fabric care application.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and expert-informed for laundry and detergent products."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1344,
        5760
      ],
      "id": "ce13d147-6a82-4001-aed6-e97754256b35",
      "name": "Laundry & Detergents",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary snack or chocolate type (e.g., \"Potato Chips\", \"Chocolate Bar\", \"Nuts Mix\", \"Popcorn\", \"Cookies\"). Specify if it is a sweet or savory snack, or a specialty chocolate product.\n\nTypical Use: A brief sentence describing the most common way the snack or chocolate is consumed (e.g., eaten as a quick snack, party treat, or dessert accompaniment).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Snack or Chocolate Name>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Lays Classic Potato Chips 150g\",\n\"category\": \"Snacks & Chocolates\",\n\"Main Ingredient\": \"Potato Chips\",\n\"Typical Use\": \"Commonly enjoyed as a savory snack at parties, gatherings, or casual eating.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in food products, with expertise in a broad range of snacks, chocolates, and their typical uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary snack or chocolate product type, specifying whether it is sweet, savory, or a specialty chocolate item.\n\nTypical Use: Provide a concise sentence describing the most common consumption or usage occasion.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1376,
        6128
      ],
      "id": "5e34f6f6-e266-4993-86a5-1fa5877d982f",
      "name": "Snacks & Chocolates",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary sauce, spread, or dip type (e.g., \"Tomato Ketchup\", \"Mayonnaise\", \"Hummus\", \"Salsa\", \"Peanut Butter\", \"Cheese Dip\"). Specify if the item is a specialty blend, regional variety, or contains unique/additional ingredients.\n\nTypical Use: A brief sentence describing the most common way the sauce, spread, or dip is consumed (e.g., used as a condiment, for dipping snacks, as a spread on bread, or as a base in food preparation).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Sauce/Spread/Dip Name>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Heinz Tomato Ketchup 500g\",\n\"category\": \"Sauces, Spreads & Dips\",\n\"Main Ingredient\": \"Tomato Ketchup\",\n\"Typical Use\": \"Commonly used as a condiment with snacks, sandwiches, and fast food.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in sauces, spreads, and dips, with expertise across all types, blends, and their typical culinary applications.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary sauce, spread, or dip type, specifying specialty, blended, or regional products as applicable.\n\nTypical Use: Provide a concise sentence describing the most common use, such as as a condiment, dip, spread, or cooking ingredient.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1408,
        6528
      ],
      "id": "497db789-fd7e-4d8c-9def-873792617d9b",
      "name": "Sauces, Spreads & Dips",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary oil or ghee type (e.g., \"Mustard Oil\", \"Sunflower Oil\", \"Olive Oil\", \"Ghee\", \"Coconut Oil\"). Specify if it is a specialty or clarified butter (ghee) product.\n\nTypical Use: A brief sentence describing the most common culinary or daily use (e.g., used for frying, sautéing, salad dressings, or as a cooking fat).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Oil/Ghee Type>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Fortune Sunflower Oil 1L\",\n\"category\": \"Oils & Ghee\",\n\"Main Ingredient\": \"Sunflower Oil\",\n\"Typical Use\": \"Commonly used for frying, sautéing, and salad dressings due to its light flavor.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in food products, with expertise in diverse cooking oils, ghee, and their typical culinary uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary oil or ghee type, specifying if it is a clarified butter (ghee) or specialty oil.\n\nTypical Use: Provide a concise sentence describing the most common culinary or everyday application.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1440,
        6912
      ],
      "id": "08c7d878-4c52-4672-89df-e06581191016",
      "name": "Oils & Ghee",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary salt, sugar, or jaggery type (e.g., \"Table Salt\", \"Rock Salt\", \"Cane Sugar\", \"Brown Sugar\", \"Jaggery\"). Specify if it is a specialty or regional variety (e.g., Himalayan Pink Salt, Palm Jaggery).\n\nTypical Use: A brief sentence describing the most common culinary or daily use (e.g., used for seasoning, sweetening beverages, making desserts, or as a cooking staple).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Salt/Sugar/Jaggery Type>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Organic Brown Sugar 1kg\",\n\"category\": \"Salt, Sugar & Jaggery\",\n\"Main Ingredient\": \"Brown Sugar\",\n\"Typical Use\": \"Commonly used to sweeten beverages and desserts, or in baking recipes.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in food products, with expertise in a wide range of salts, sugars, jaggery, and their typical culinary uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary salt, sugar, or jaggery type, specifying if it is a specialty or regional variety.\n\nTypical Use: Provide a concise sentence describing the most common culinary or everyday application.\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1424,
        7280
      ],
      "id": "d85d03e9-457b-4625-b613-34040ada30c7",
      "name": "Salt, Sugar & Jaggery",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1264,
        4304
      ],
      "id": "cc75d046-b9f1-4bd0-b0b4-756c827b826a",
      "name": "OpenAI Chat Model18",
      "credentials": {
        "openAiApi": {
          "id": "tGug7iS77nuy2yvh",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Sno\": \"{{ $json.Sno }}\",\n  \"ProductName\": \"{{ $json.ProductName }}\",\n  \"category\": \"{{ $json.category }}\",\n  \"Main Ingredient\": \"<Ingredient/Item Name>\",\n  \"Typical Use\": \"<Typical use description>\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1456,
        4320
      ],
      "id": "61ee076b-b883-44bb-8e88-5975cb01a97e",
      "name": "Structured Output Parser18"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items (array of {json: {...}}) from previous node\nconst inputItems = $input.all();\n\n// Extract the JSON objects from input\nconst inputData = inputItems.map(item => item.json);\n\nconst extractProductSummary = (products) => {\n  return products.map(product => ({\n    Sno: product.Sno,\n    ProductName: product.ProductName ? product.ProductName.trim() : \"\",\n    category: product.category || \"\"\n  }));\n};\n\n// Get simplified data\nconst output = extractProductSummary(inputData);\n\n// n8n requires array of { json: ... } objects to pass output\nreturn output.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        4112
      ],
      "id": "b587ac1f-9c0c-4ba7-beb7-94625251cb12",
      "name": "Code18"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1072,
        4112
      ],
      "id": "c89e6770-de3b-4ff9-a1c6-3d82316fc544",
      "name": "Wait18",
      "webhookId": "bcb57c66-ffdf-46ee-b430-bb8ef36d6494"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Given the following product data in tabular format:\nSno: {{ $json.Sno }}\nProductName: {{ $json.ProductName }}\ncategory: {{ $json.category }}\n\nPlease extract metadata including:\n\nMain Ingredient: The primary bread or bakery product type (e.g., \"Whole Wheat Bread\", \"Brioche\", \"Baguette\", \"Croissant\", \"Rusk\", \"Muffin\"). Specify if the product is a specialty bread type or bakery item such as filled, toasted, or multigrain.\n\nTypical Use: A brief sentence describing the most common culinary or daily use (e.g., eaten as a staple food, used for sandwiches, toasted as a snack, or served with meals).\n\nReturn your response as a JSON object in this format:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"{{ $json.ProductName }}\",\n\"category\": \"{{ $json.category }}\",\n\"Main Ingredient\": \"<Bread/Bakery Product Name>\",\n\"Typical Use\": \"<Typical use description>\"\n}\n\nExample:\n{\n\"Sno\": \"{{ $json.Sno }}\",\n\"ProductName\": \"Farmhouse Whole Wheat Bread 400g\",\n\"category\": \"Breads & Bakery\",\n\"Main Ingredient\": \"Whole Wheat Bread\",\n\"Typical Use\": \"Commonly consumed as a staple at breakfast or used for sandwiches and toast.\"\n}\n\nInstructions:\n\nDo NOT replace placeholders (e.g., {{ $json.Sno }}, {{ $json.ProductName }}, {{ $json.category }}).\n\nBase responses solely on the given product data.\n\nProvide concise, factual, food-knowledgeable responses.\n\nLeave the \"Possible Substitute\" field empty if none confidently applies.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a highly knowledgeable supermarket product metadata extraction assistant specialized in breads and bakery products, with expertise in diverse bread types, bakery items, and their typical culinary uses.\n\nAnalyze product data (Sno, ProductName, category) and generate structured metadata containing:\n\nMain Ingredient: Clearly identify the primary bread or bakery product type, specifying specialty varieties such as multigrain, toasted, filled, or artisanal breads.\n\nTypical Use: Provide a concise sentence describing the most common culinary or everyday application (e.g., staple food, sandwich base, snack, accompaniment to meals).\n\nGuidelines:\n\nKeep placeholders exactly as is ({{ $json.Sno }}, etc.); do NOT alter them.\n\nBase metadata strictly on the provided product data without adding external information.\n\nEnsure responses are concise, factual, and food-expert informed."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1280,
        4112
      ],
      "id": "c7400b60-ee65-4024-bf37-05917bb0ae98",
      "name": "Breads & Bakery",
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueRegularOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "Google Sheets Trigger": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Fresh Fruits",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Fresh Fruits",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Fresh Fruits",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Fresh Vegetables",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Fresh Vegetables",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Fresh Vegetables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Dairy & Milk Products",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Dairy & Milk Products",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Dairy & Milk Products",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Breakfast & Cereals",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Breakfast & Cereals",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Wait3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait3": {
      "main": [
        [
          {
            "node": "Breakfast & Cereals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Atta, Rice & Dhals",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser4": {
      "ai_outputParser": [
        [
          {
            "node": "Atta, Rice & Dhals",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Wait4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait4": {
      "main": [
        [
          {
            "node": "Atta, Rice & Dhals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Tea, Coffee & Beverages",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser5": {
      "ai_outputParser": [
        [
          {
            "node": "Tea, Coffee & Beverages",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Wait5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait5": {
      "main": [
        [
          {
            "node": "Tea, Coffee & Beverages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "Masalas & Spices",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser6": {
      "ai_outputParser": [
        [
          {
            "node": "Masalas & Spices",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Wait6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait6": {
      "main": [
        [
          {
            "node": "Masalas & Spices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Instant & Ready Mixes",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser7": {
      "ai_outputParser": [
        [
          {
            "node": "Instant & Ready Mixes",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "Wait7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait7": {
      "main": [
        [
          {
            "node": "Instant & Ready Mixes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "Ice Creams & Frozen Foods",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser8": {
      "ai_outputParser": [
        [
          {
            "node": "Ice Creams & Frozen Foods",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code8": {
      "main": [
        [
          {
            "node": "Wait8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait8": {
      "main": [
        [
          {
            "node": "Ice Creams & Frozen Foods",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "Household Cleaning",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser9": {
      "ai_outputParser": [
        [
          {
            "node": "Household Cleaning",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "Wait9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait9": {
      "main": [
        [
          {
            "node": "Household Cleaning",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "Beauty & Personal Care",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser10": {
      "ai_outputParser": [
        [
          {
            "node": "Beauty & Personal Care",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Wait10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait10": {
      "main": [
        [
          {
            "node": "Beauty & Personal Care",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model11": {
      "ai_languageModel": [
        [
          {
            "node": "Stationery & Games",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser11": {
      "ai_outputParser": [
        [
          {
            "node": "Stationery & Games",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code11": {
      "main": [
        [
          {
            "node": "Wait11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait11": {
      "main": [
        [
          {
            "node": "Stationery & Games",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model12": {
      "ai_languageModel": [
        [
          {
            "node": "Baby Care",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser12": {
      "ai_outputParser": [
        [
          {
            "node": "Baby Care",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "Wait12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait12": {
      "main": [
        [
          {
            "node": "Baby Care",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model13": {
      "ai_languageModel": [
        [
          {
            "node": "Laundry & Detergents",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser13": {
      "ai_outputParser": [
        [
          {
            "node": "Laundry & Detergents",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code13": {
      "main": [
        [
          {
            "node": "Wait13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait13": {
      "main": [
        [
          {
            "node": "Laundry & Detergents",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model14": {
      "ai_languageModel": [
        [
          {
            "node": "Snacks & Chocolates",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser14": {
      "ai_outputParser": [
        [
          {
            "node": "Snacks & Chocolates",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code14": {
      "main": [
        [
          {
            "node": "Wait14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait14": {
      "main": [
        [
          {
            "node": "Snacks & Chocolates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model15": {
      "ai_languageModel": [
        [
          {
            "node": "Sauces, Spreads & Dips",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser15": {
      "ai_outputParser": [
        [
          {
            "node": "Sauces, Spreads & Dips",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code15": {
      "main": [
        [
          {
            "node": "Wait15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait15": {
      "main": [
        [
          {
            "node": "Sauces, Spreads & Dips",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model16": {
      "ai_languageModel": [
        [
          {
            "node": "Oils & Ghee",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser16": {
      "ai_outputParser": [
        [
          {
            "node": "Oils & Ghee",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code16": {
      "main": [
        [
          {
            "node": "Wait16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait16": {
      "main": [
        [
          {
            "node": "Oils & Ghee",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model17": {
      "ai_languageModel": [
        [
          {
            "node": "Salt, Sugar & Jaggery",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser17": {
      "ai_outputParser": [
        [
          {
            "node": "Salt, Sugar & Jaggery",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code17": {
      "main": [
        [
          {
            "node": "Wait17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait17": {
      "main": [
        [
          {
            "node": "Salt, Sugar & Jaggery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code18",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code13",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code14",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code15",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code16",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fresh Vegetables": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fresh Fruits": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Dairy & Milk Products": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Breakfast & Cereals": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Atta, Rice & Dhals": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tea, Coffee & Beverages": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Masalas & Spices": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instant & Ready Mixes": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ice Creams & Frozen Foods": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Household Cleaning": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Beauty & Personal Care": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stationery & Games": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baby Care": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Laundry & Detergents": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Snacks & Chocolates": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sauces, Spreads & Dips": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Oils & Ghee": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Salt, Sugar & Jaggery": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model18": {
      "ai_languageModel": [
        [
          {
            "node": "Breads & Bakery",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser18": {
      "ai_outputParser": [
        [
          {
            "node": "Breads & Bakery",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code18": {
      "main": [
        [
          {
            "node": "Wait18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait18": {
      "main": [
        [
          {
            "node": "Breads & Bakery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Breads & Bakery": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "06b37cfc-43f8-49fd-89ac-d2a6af4ea670",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "94a02670f2c949c2d78d8d1669f225e8efb83591e20da839da87646ce6ec47be"
  },
  "id": "d4kgyjdBvNFGV9U8",
  "tags": []
}